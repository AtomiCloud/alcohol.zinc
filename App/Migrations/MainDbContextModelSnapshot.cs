// <auto-generated />
using System;
using App.StartUp.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Modules.Causes.Data.CauseData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Causes");
                });

            modelBuilder.Entity("App.Modules.Charities.Data.CharityCauseData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.HasIndex("CharityId", "CauseId")
                        .IsUnique();

                    b.ToTable("CharityCauses");
                });

            modelBuilder.Entity("App.Modules.Charities.Data.CharityData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("Countries")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Mission")
                        .HasMaxLength(8192)
                        .HasColumnType("character varying(8192)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PrimaryRegistrationCountry")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("PrimaryRegistrationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Slug")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("Countries");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Countries"), "gin");

                    b.HasIndex("Name");

                    b.HasIndex("PrimaryRegistrationCountry", "PrimaryRegistrationNumber");

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("App.Modules.Charities.Data.ExternalIdData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("Source", "ExternalKey")
                        .IsUnique();

                    b.ToTable("ExternalIds");
                });

            modelBuilder.Entity("App.Modules.Configurations.Data.ConfigurationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefaultCharityId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("EndOfDay")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCharityId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("App.Modules.Habit.Data.HabitData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Version");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("App.Modules.HabitExecution.Data.HabitExecutionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("HabitVersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentProcessed")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HabitVersionId", "Date")
                        .IsUnique();

                    b.ToTable("HabitExecutions");
                });

            modelBuilder.Entity("App.Modules.HabitVersion.Data.HabitVersionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharityId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("HabitId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("NotificationTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("RatioBasisPoints")
                        .HasColumnType("integer");

                    b.Property<int>("StakeCents")
                        .HasColumnType("integer");

                    b.Property<string>("StakeCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("HabitId", "Version")
                        .IsUnique();

                    b.ToTable("HabitVersions");
                });

            modelBuilder.Entity("App.Modules.Payment.Data.PaymentCustomerData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AirwallexCustomerId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentConsentId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PaymentConsentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AirwallexCustomerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PaymentCustomers");
                });

            modelBuilder.Entity("App.Modules.Users.Data.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Modules.Charities.Data.CharityCauseData", b =>
                {
                    b.HasOne("App.Modules.Causes.Data.CauseData", null)
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Modules.Charities.Data.CharityData", null)
                        .WithMany()
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Modules.Charities.Data.ExternalIdData", b =>
                {
                    b.HasOne("App.Modules.Charities.Data.CharityData", null)
                        .WithMany()
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Modules.Configurations.Data.ConfigurationData", b =>
                {
                    b.HasOne("App.Modules.Charities.Data.CharityData", "Charity")
                        .WithMany()
                        .HasForeignKey("DefaultCharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charity");
                });

            modelBuilder.Entity("App.Modules.HabitExecution.Data.HabitExecutionData", b =>
                {
                    b.HasOne("App.Modules.HabitVersion.Data.HabitVersionData", "HabitVersion")
                        .WithMany("Executions")
                        .HasForeignKey("HabitVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HabitVersion");
                });

            modelBuilder.Entity("App.Modules.HabitVersion.Data.HabitVersionData", b =>
                {
                    b.HasOne("App.Modules.Charities.Data.CharityData", "Charity")
                        .WithMany()
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Modules.Habit.Data.HabitData", "Habit")
                        .WithMany("Versions")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charity");

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("App.Modules.Habit.Data.HabitData", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("App.Modules.HabitVersion.Data.HabitVersionData", b =>
                {
                    b.Navigation("Executions");
                });
#pragma warning restore 612, 618
        }
    }
}
